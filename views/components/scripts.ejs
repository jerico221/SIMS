<!-- Logout Modal-->
<div
  class="modal fade"
  id="logoutModal"
  tabindex="-1"
  role="dialog"
  aria-labelledby="exampleModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
        <button
          class="close"
          type="button"
          data-dismiss="modal"
          aria-label="Close"
        >
          <span aria-hidden="true">Ã—</span>
        </button>
      </div>
      <div class="modal-body">
        Select "Logout" below if you are ready to end your current session.
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" type="button" data-dismiss="modal">
          Cancel
        </button>
        <button name="logoutBtn" id="logoutBtn" class="btn btn-primary">
          Logout
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap core JavaScript-->
<script src="/vendor/jquery/jquery.min.js"></script>
<script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

<!-- Core plugin JavaScript-->
<script src="/vendor/jquery-easing/jquery.easing.min.js"></script>

<!-- Custom scripts for all pages-->
<script src="/javascripts/js/sb-admin-2.min.js"></script>

<!-- Page level plugins -->
<script src="/vendor/chart.js/Chart.min.js"></script>

<!-- TOASTR -->
<script src="/javascripts/toastr.min.js"></script>

<!-- XLSX -->
<script src="/javascripts/xlsx.mini.min.js"></script>

<!-- SWAL-->
<script src="/javascripts/sweetalert.min.js"></script>

<!-- SocketIO -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.2/socket.io.js"></script>

<!-- DATE RANGE PICKER -->
<script
  type="text/javascript"
  src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"
></script>
<script
  type="text/javascript"
  src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"
></script>
<link
  rel="stylesheet"
  type="text/css"
  href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css"
/>

<%- include("notification.ejs")%>

<script>
  $(document).ready(function () {
    //#region Sidebar
    $(document).ready(function () {
      if ($(".collapse-item.active").length > 0) {
        $(".collapse-item.active").closest(".collapse").addClass("show");
      }

      $(".collapse-item").click(function () {
        $(".collapse-item").removeClass("active");
        $(this).addClass("active");
      });

      var path = window.location.pathname;

      $(".collapse-item").each(function () {
        var href = $(this).attr("href");
        if (path === href) {
          $(this).addClass("active");
          $(this).closest(".collapse").addClass("show");
        }
      });

      function adjustCollapse() {
        if ($(window).width() <= 767) {
          $(".collapse").removeClass("show");
          $(
            ".row.d-flex.justify-content-center.align-items-center"
          ).removeClass("login-height");
        } else {
          $(".collapse-item.active").closest(".collapse").addClass("show");
        }
      }
      adjustCollapse();

      $(window).resize(function () {
        adjustCollapse();
      });

      $(document).on("click", function (event) {
        if ($(window).width() <= 767) {
          if (!$(event.target).closest(".collapse").length) {
            $(".collapse").removeClass("show");
          }
        }
      });
    });

    $(document).ready(function () {
      let isSidebarOpen = localStorage.getItem("isSidebarOpen") === "true";

      function updateSidebarState() {
        $("body").toggleClass("sidebar-toggled", isSidebarOpen);
        $(".sidebar").toggleClass("toggled", isSidebarOpen);

        if (isSidebarOpen) {
          $(".sidebar .collapse").collapse("hide");
          $("#content").toggleClass("content-toggled");
          $(".navbar").toggleClass("navbar-toggled");
          $(".sticky-footer").toggleClass("footer-toggled");
        } else {
          $("#content").removeClass("content-toggled");
          $(".navbar").removeClass("navbar-toggled");
          $(".sticky-footer").removeClass("footer-toggled");
        }
      }

      updateSidebarState();

      $("#sidebarToggle, #sidebarToggleTop").on("click", function (e) {
        isSidebarOpen = !isSidebarOpen;

        localStorage.setItem("isSidebarOpen", isSidebarOpen);

        updateSidebarState();
      });
    });
    //#endregion
  });
</script>

<!-- Page level custom scripts -->
<script>
  function messagePrompt(title, text, icon) {
    return swal({
      title: title,
      text: text,
      icon: `${icon}`,
      buttons: {
        confirm: {
          text: "OK",
          value: true,
          visible: true,
          className: "swal-button-ok",
        },
      },
    });
  }

  function getStatusBackground(status) {
    switch (status) {
      case "REQUEST":
        return "status-pending";
      case "PENDING":
        return "status-pending";
      case "COMPLETED":
        return "status-success";
      case "ACTIVE":
        return "status-success";
      case "APPROVED":
        return "status-success";
      case "REPLACE":
        return "status-inprogress";
      case "RETURN":
        return "status-inprogress";
      case "IN PROGRESS":
        return "status-inprogress";
      case "PREPARING":
        return "status-inprogress";
      case "FOR DELIVERY":
        return "status-inprogress";
      case "DAMAGE":
        return "status-warning";
      case "INACTIVE":
        return "status-warning";
      case "CANCELLED":
        return "status-warning";
      default:
        return "";
    }
  }

  function getContainerBackground(status) {
    switch (status) {
      case "PENDING":
        return "status-container-pd";
      case "REQUEST":
        return "status-container-pd";
      case "COMPLETED":
        return "status-container-sc";
      case "ACTIVE":
        return "status-container-sc";
      case "APPROVED":
        return "status-container-sc";
      case "REPLACE":
        return "status-container-inpg";
      case "RETURN":
        return "status-container-inpg";
      case "IN PROGRESS":
        return "status-container-inpg";
      case "DAMAGE":
        return "status-container-wr";
      case "INACTIVE":
        return "status-container-wr";
      case "CANCELLED":
        return "status-container-wr";
      default:
        return "";
    }
  }

  function success(title, text) {
    toastr.success(text, title, {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: true,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    });
  }

  function warning(title, text) {
    toastr.warning(text, title, {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: true,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "hide",
    });
  }

  function info(title, text) {
    toastr.info(text, title, {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: true,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    });
  }

  //#region Logout
  $(document).on("click", "#logoutBtn", function () {
    $.ajax({
      type: "GET",
      url: "/login/logout",
      success: function (result) {
        success("Logout", "Successfully");
        location.replace("/");
      },
      error: function (err) {
        warning("Error", err);
      },
    });
  });
  //#endregion

  //#region New Dropdown
  function AddDropdownData(dropdownID, activeData, inputID, hiddenID) {
    for (const data of activeData) {
      AddOption(dropdownID, data.display, data.value, inputID, hiddenID);
    }
  }

  function AddOption(dropdownID, displayText, actualValue, inputID, hiddenID) {
    const dropdownElement = document.getElementById(dropdownID);
    const hiddenInput = document.getElementById(hiddenID);

    const newOption = document.createElement("div");
    newOption.className = "dropdown-option";
    newOption.textContent = displayText;
    newOption.setAttribute("data-value", actualValue);

    newOption.addEventListener("click", function () {
      const inputElement = document.getElementById(inputID);
      inputElement.value = displayText;
      hiddenInput.value = actualValue;
      dropdownElement.style.display = "none";
    });

    dropdownElement.appendChild(newOption);

    SetupDropdown(inputID, dropdownID, "dropdown-option");
  }

  function SetupDropdown(inputId, dropdownId, optionClass) {
    const inputElement = document.getElementById(inputId);
    const dropdownElement = document.getElementById(dropdownId);
    const options = dropdownElement.getElementsByClassName(optionClass);

    inputElement.addEventListener("click", function () {
      dropdownElement.style.display = "block";
    });

    for (const option of options) {
      option.addEventListener("click", function () {
        inputElement.value = option.textContent;
        const actualValue = option.getAttribute("data-value");
        inputElement.setAttribute("data-actual-value", actualValue);
        dropdownElement.style.display = "none";
      });
    }

    inputElement.addEventListener("input", function () {
      const value = inputElement.value.toUpperCase();
      for (const option of options) {
        if (option.textContent.toUpperCase().includes(value)) {
          option.style.display = "block";
        } else {
          option.style.display = "none";
        }
      }
      dropdownElement.style.display = "block";
    });

    document.addEventListener("click", function (event) {
      const target = event.target;
      if (!dropdownElement.contains(target) && target !== inputElement) {
        dropdownElement.style.display = "none";
      }
    });
  }
  //#endregion

  //#region Formatter
  function formatPrice(event, input) {
    event.preventDefault();

    const cursorPosition = input.selectionStart;
    const originalValue = input.value;
    const defaultValue = "â‚±0.00";
    const currentValue = originalValue || defaultValue;

    let value = currentValue.replace(/[^0-9.]/g, "");
    let number = parseFloat(value);

    if (!isNaN(number)) {
      const formattedValue = number.toLocaleString("en-PH", {
        style: "currency",
        currency: "PHP",
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      });

      input.value = formattedValue;

      let newPosition =
        cursorPosition +
        (formattedValue.indexOf(".") > currentValue.indexOf(".") ? 1 : 0);

      // Set the new cursor position
      input.setSelectionRange(newPosition, newPosition);
    } else {
      input.value = defaultValue;
    }
  }

  function RemoveCurrencyFormatting(val) {
    return val.replace(/[^\d.-]/g, "");
  }

  function formatCurrency(value) {
    if (!value) {
      return "â‚±0.00";
    }
    var formattedValue = parseFloat(value).toFixed(2);
    return "â‚±" + formattedValue.replace(/\d(?=(\d{3})+\.)/g, "$&,");
  }
  //#endregion

  //#region Chat

  //#endregion

  //#region AJAX CALLS
  //@use for updating/saving/inserting data
  Upsert = (type, url, data, callback) => {
    $.ajax({
      type: type,
      url: url,
      data: data,
      success: function (result) {
        callback(result);
      },
      error: function (err) {
        warning(
          "Error",
          "An error occurred while communicating with the server."
        );
      },
    });
  };

  //@use for fetching GET data
  Fetch = (url, callback) => {
    $.ajax({
      url: url,
      method: "GET",
      dataType: "json",
      success: function (result) {
        callback(result);
      },
      error: function (err) {
        warning(
          "Error",
          "An error occurred while communicating with the server."
        );
      },
    });
  };

  //@use for fetching data with progress bar
  FetchTableData = (url, callback) => {
    $(".progress").hide();
    $(".progress").slideDown();

    $.ajax({
      url: url,
      type: "GET",
      xhrFields: {
        onprogress: function (e) {
          if (e.lengthComputable) {
            let percentComplete = (e.loaded / e.total) * 100;
            $(".progress-bar").css("width", percentComplete + "%");
          }
        },
      },
      success: function (result) {
        setTimeout(function () {
          $(".progress").slideUp(function () {
            const data = result.data;
            if (result.msg === "success") {
              callback(data);
            } else {
              console.error(result.msg);
            }
          });
        }, 1000);
      },
      error: function (error) {
        warning(
          "Error",
          "An error occurred while communicating with the server."
        );
      },
    });
  };
  //#endregion

  //#region Ajax Utility
  const Query = (url, type, data = null) => {
    return new Promise((resolve, reject) => {
      let ajaxOptions = {
        url: url,
        method: type,
        dataType: "json",
        success: function (result) {
          resolve(result);
        },
        error: function (err) {
          reject(err);
          warning(
            "Error",
            "An error occurred while communicating with the server."
          );
        },
      };

      if (["PUT", "POST", "PATCH", "DELETE"].includes(type) && data) {
        ajaxOptions.data = JSON.stringify(data);
        ajaxOptions.contentType = "application/json";
      }

      $.ajax(ajaxOptions);
    });
  };

  const queryUtility = {
    async Load(url) {
      return await Query(url, "GET");
    },
    async Save(url, data) {
      return await Query(url, "POST", data);
    },
    async Update(url, data) {
      return await Query(url, "PUT", data);
    },
    async Delete(url, data) {
      return await Query(url, "DELETE", data);
    },
  };
  //#endregion
</script>
